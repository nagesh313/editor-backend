{"version":3,"sources":["Editor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["store","createStore","height","width","key","addPage","EditorApp","React","useState","name","setName","xyz","setXYZ","list","setList","useEffect","intialLoad","fetch","then","response","console","log","json","data","Grid","container","xs","item","TextField","label","onChange","event","target","value","Button","variant","color","onClick","method","headers","Accept","body","JSON","stringify","toJSON","style","display","downloadButtonEnabled","Table","aria-label","size","TableHead","TableRow","fontWeight","TableCell","TableBody","map","row","component","scope","align","loadJSON","parse","Math","random","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c25af0ea.chunk.js","sourcesContent":["import {\n  Button,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport { Workspace } from \"polotno/canvas/workspace\";\nimport { createStore } from \"polotno/model/store\";\nimport { SidePanel } from \"polotno/side-panel/side-panel\";\nimport { Toolbar } from \"polotno/toolbar/toolbar\";\nimport { ZoomButtons } from \"polotno/toolbar/zoom-buttons\";\nimport React, { useEffect } from \"react\";\nlet store = createStore({\n  height: \"600px\",\n  width: \"600px\",\n  key: \"nFA5H9elEytDyPyvKL7T\",\n});\n\nstore.addPage();\n\nexport const EditorApp = () => {\n  const [name, setName] = React.useState(\"\");\n  const [xyz, setXYZ] = React.useState(\"\");\n  const [list, setList] = React.useState<any>([]);\n  useEffect(() => {\n    // Update the document title using the browser API\n    intialLoad();\n  }, []);\n  const intialLoad = () => {\n    fetch(\"/api\")\n      .then((response) => {\n        console.log(response);\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setList(data);\n      });\n  };\n  const handleSave = () => {\n    console.log(xyz);\n    fetch(\"/api\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        name: name,\n        json: JSON.stringify(store.toJSON()),\n      }),\n    }).then(() => {\n      intialLoad();\n    });\n  };\n  const load = (json) => {\n    store.loadJSON(JSON.parse(json));\n    setXYZ(\"\" + Math.random());\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <>\n      <Grid container>\n        <Grid xs={3} item>\n          <TextField label=\"Template Name\" onChange={handleChange}></TextField>\n        </Grid>\n        <Grid item xs={3}>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\n            Save\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid container>\n        <Grid xs={3} item style={{ height: \"90vh\", display: \"flex\" }}>\n          <SidePanel store={store} />\n        </Grid>\n        <Grid item xs={6}>\n          <Toolbar store={store} downloadButtonEnabled={true} />\n          <Workspace store={store} />\n          <ZoomButtons store={store} />\n        </Grid>\n        <Grid item xs={3}>\n          <Table aria-label=\"simple table\" size=\"small\">\n            <TableHead>\n              <TableRow style={{ fontWeight: \"bold\" }}>\n                <TableCell>Template Name</TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {list.map((row) => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.name}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={() => {\n                        load(row.json);\n                      }}\n                    >\n                      Load\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { EditorApp } from \"./Editor\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EditorApp></EditorApp>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}